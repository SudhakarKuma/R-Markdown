?for
help(for)for (variable in vector) {
}
??for
?plot
x <- c(1:4, NA, 6:8)
x
x <- c(1:4, NA, 6:8, NA)
x
x[is.na(x)] <- 0
x
cat(sum(is.na(x)), 0, "\n")
is_miss <- is.na(x)
is_miss
x <- c(1:4, NA, 6:8, NA)
is_miss
is_miss <- is.na(x)
is_miss
x[is_miss] <- 0
x
cat(sum(is_miss, 0, "\n"))
cat(sum(is_miss), 0, "\n")
?message
?quantile
?map_lgl
library(purr)
install.packages("purr")
install.packages("purrr")
library(purr)
library(purrr)
remove.packages("purrr", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
?lm
?help(read.table)
args(read.table)
vector("logical", length = 5)
l <- vector("logical", length = 5)
l
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
seq(1,5,2)
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
source('~/Desktop/test.R', echo=TRUE)
myMatrix <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
print(myMatrix)
myMatrix <- matrix(1:6, nrow = 2, ncol = 3)
print(myMatrix)
print(myMatrix[2,])
print(myMatrix[,2])
print(myMatrix[,c(2:3)])
print(df)
df <- data.frame(name = c("A", "B", "C"),
marks = c(5,8,9))
print(df)
dim(df)
str(df)
df
df[1:2,2] <- NA
df
is.na(df)
df[!complete.cases(df),]
df[complete.cases(df),]
df[complete.cases(df)]
df[complete.cases(df),]
df[!complete.cases(df),]
table(is.na(df))
df
mean(df$marks)
mean(df$marks, na.rm = TRUE)
new_df <- na.omit(df)
print(new_df)
vec <- seq(5,10,0.5)
vec <- seq(5,10,0.5)
for(i in 1:length(vec)){
print(vec[i])
}
copyvec <- vector("numeric", length(vec))
vec <- seq(5,10,0.5)
copyvec <- vector("numeric", length(vec))
for(i in 1:length(vec)){
copyvec[i] <-  vec[i])
}
vec <- seq(5,10,0.5)
copyvec <- vector("numeric", length(vec))
for(i in 1:length(vec)){
copyvec[i] <-  vec[i]
}
copyvec
if(length(copyvec) == length(vec)){
print("Mission accomplished!!")
}
if(length(copyvec) == length(vec)){
print("Mission accomplished!!")
} else{
print("Try again")
}
install.packages("shinydashboard")
shinyApp(ui)
shinyApp()
source('~/ui.R', echo=TRUE)
shiny::runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
?shinyApp
source('~/Desktop/myProject/shiny/ui/app.R', echo=TRUE)
shinyApp(app)
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
runApp('Desktop/myProject/shiny/ui')
dim(iris)
dim(iris3)
iris
2*3
map.cities
data(world.cities)
data("WorldPhones")
WorldPhones
install.packages("geosphere")
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
install.packages("tidyverse")
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
?map
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
library(ggmap)
install.packages("ggmap")
library(ggplot2)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
?register_google
devtools::install_github("dkahle/ggmap")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("dkahle/ggmap")
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
?register_google
library(ggmap)
ggmap_show_api_key()
google_key()
map <- get_map(location = 'India', zoom = 4)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
?get_stamenmap
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
source('~/Desktop/myProject/Mapping/mapTest.R', echo=TRUE)
library(ggmap)
register_google()
geocode(c("White House", "Uluru"))
a = 2
library(ggmap)
?register_google
register_google("AIzaSyCFmGqaQewXkEUSysj42e_dh_X_9RHIsvQ")
geocode(c("White House", "Uluru"))
geocode(c("White House", "Uluru"))
map <- get_map(location = 'India', zoom = 4)
map <- get_map(location = 'india', zoom = 4)
x <- seq(-pi,pi,0.1)
plot(x,sin(x))
plot(x,sin(x), type = "l")
plot(x,sin(x), type = "p")
plot(x,sin(x), type = "o")
?seq
y <- sin(x)
plot(x,y)
plot(x, y,
main="Plotting sine curve",
ylab="sin(x)")
?plot
ts (1:10, frequency = 12, start = 1990)
ts (1:12, frequency = 12, start = 1990)
?ts
ts(1:10, frequency = 4, start = c(1959, 2))
ts(1:10, frequency = 4, start = c(1959, 3))
ts(1:10, frequency = 4, start = c(1959, 4))
ts(1:10, frequency = 5, start = c(1959, 4))
?ts
?plot
?pch
setwd("~/Desktop/myProject/Plots")
source('~/Desktop/myProject/Plots/barPlots.R', echo=TRUE)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2,
col.lab="blue",
cex.axis = 2)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2,
col.lab="blue",
cex.axis = 0.5)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2,
srt = 3)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2,
srt = 30)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2,
srt = 30,
cex.axis = 5)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 1)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 3)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 30)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 3)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(8,8,1,1)) # adjust as needed
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
?mar
?par
par(mar=c(5,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(18,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(15,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(10,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(12,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,8,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,5,1,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,5,2,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,5,5,1)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,5,5,5)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
source('~/Desktop/myProject/Plots/barPlots.R', echo=TRUE)
par(mar=c(11,5,5,3)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
par(mar=c(11,5,5,2)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
setwd("~/Desktop/myProject/Plots")
# Clear R workspace
rm(list = ls() )
# Declare a variable to read and store moviesData
movies <- read.csv("moviesData.csv")
# View the stored data frame
View(movies)
# View the dimension of the data frame
dim(movies)
moviesSub <- movies[1:20,]
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
xlab = "Movies",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating")
par(mar=c(11,5,5,2)) # c(bottom, left, top, right)
barplot(moviesSub$imdb_rating,
ylab = "IMDB rating",
col = "blue",
ylim = c(0,10),
main = "Movies' IMDB rating",
names.arg = moviesSub$title,
las = 2)
class(movies$imdb_rating)
setwd("~/Desktop/myProject/R-Markdown")
which(movies$imdb_rating==minMax[1])
View(movies)
movies$title[395]
movies$title[,395]
movies$title[395,]
movies$title[395]
movies[1,]
movies$title[1]
print(movies$title[1])
movies$title
movies$title[1]
movies$title[movies$imdb_rating==range(movies$imdb_rating)[1]]
View(movies)
movies.title
movies.title[1]
movies$title[movies$imdb==9]
range(movies$imdb_rating)
movies$title[movies$imdb_rating==9]
movies[movies$title=="The Godfather, Part II"]
movies[movies$imdb_rating>=9]
movies[movies$imdb_rating>9]
movies[movies$imdb_rating>8]
movies[movies$imdb_rating > 8]
movies[movies$imdb_rating == 8]
movies[movies$imdb_rating==9]
movies[movies$imdb_rating==1]
movies[movies$imdb_rating==1.2]
movies[imdb_rating>2]
movies[movies$imdb_rating == 9]
movies[movies$imdb_rating==5]
movies[movies$imdb_rating==5,]
movies[movies$imdb_rating>=9,]
movies$title[movies$imdb_rating>=9,]
movies$title[,movies$imdb_rating>=9]
movies$title[movies$imdb_rating>=9]
movies$title[movies$imdb_rating>=8]
moviesSub <- subset(movies, movies$imdb_rating==9)
moviesSub
moviesSub$title
which(moviesSub$imdb_rating==9)
which(movies$imdb_rating==9)
which(movies$imdb_rating==1.9)
movies$title[movies$imdb_rating>1]
movies$title[movies$imdb_rating==1.9]
?par
?text
?text
?xpd
??xpd
?text
?barplot
